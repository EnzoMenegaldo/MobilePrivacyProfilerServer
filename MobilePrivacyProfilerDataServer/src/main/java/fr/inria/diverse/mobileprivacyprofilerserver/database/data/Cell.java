/*  */
package fr.inria.diverse.mobileprivacyprofilerserver.database.data;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

// Start of user code additional import for Cell
// End of user code

/** 
  *  
  */ 
@DatabaseTable(tableName = "cell")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, 
                  property  = "_id",
				  scope = Cell.class)
public class Cell implements DbClass {

	public static Log log = LogFactory.getLog(Cell.class);

	public static final String XML_CELL = "CELL";
	public static final String XML_ATT_ID = "_id";
	public static final String XML_ATT_ANDROID_ID = "android_id";
	public static final String XML_ATT_CELLID = "cellId";
	public static final String XML_ATT_USERID = "userId";
	public static final String XML_REF_HISTORY = "history";
	public static final String XML_REF_CDMAPOSITION = "cdmaposition";
	public static final String XML_REF_OTHERPOSITION = "otherPosition";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	@JsonIgnore
	protected MobilePrivacyProfilerDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	

	@DatabaseField
	protected int cellId;

	@DatabaseField
	protected java.lang.String userId;
	

	@ForeignCollectionField(eager = false, foreignFieldName = "cells")
	@JsonIgnore
	protected ForeignCollection<NeighboringCellHistory> history;

	@ForeignCollectionField(eager = false, foreignFieldName = "identity")
	@JsonIgnore
	protected ForeignCollection<CdmaCellData> cdmaposition;

	@ForeignCollectionField(eager = false, foreignFieldName = "identity")
	@JsonIgnore
	protected ForeignCollection<OtherCellData> otherPosition;

	@DatabaseField
	protected int android_id;

	// Start of user code Cell additional user properties
	// End of user code
	
	public Cell() {} // needed by ormlite
	public Cell(int cellId, java.lang.String userId) {
		super();
		this.cellId = cellId;
		this.userId = userId;
	} 

	/**
	 * raw_id from client converted as part of a primary key in combination of user UUID
	 */
	public int get_id() {
		return _id;
	}
	@JsonProperty
	public void set_id(int id) {
		this._id = id;
	}

	public int getAndroid_id() {
		return android_id;
	}
	@JsonProperty
	public void setAndroid_id(int id) {
		this.android_id = id;
	}

	public MobilePrivacyProfilerDBHelper getContextDB(){
		return _contextDB;
	}
	@JsonIgnore
	public void setContextDB(MobilePrivacyProfilerDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public int getCellId() {
		return this.cellId;
	}
	@JsonProperty
	public void setCellId(int cellId) {
		this.cellId = cellId;
	}
	public java.lang.String getUserId() {
		return this.userId;
	}
	@JsonProperty
	public void setUserId(java.lang.String userId) {
		this.userId = userId;
	}

	public List	<NeighboringCellHistory> getHistory() {
		if(null==this.history){return null;}
		return new ArrayList<NeighboringCellHistory>(history);
	}
	

			
	public List	<CdmaCellData> getCdmaposition() {
		if(null==this.cdmaposition){return null;}
		return new ArrayList<CdmaCellData>(cdmaposition);
	}
	

			
	public List	<OtherCellData> getOtherPosition() {
		if(null==this.otherPosition){return null;}
		return new ArrayList<OtherCellData>(otherPosition);
	}
	

			



	public String toXML(String indent, MobilePrivacyProfilerDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_CELL);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
		sb.append(XML_ATT_ANDROID_ID);
		sb.append("=\"");
		sb.append(this.android_id);
		sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_CELLID);
    	sb.append("=\"");
		sb.append(this.cellId);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_USERID);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.userId));
    	sb.append("\" ");
    	sb.append(">");


		sb.append("\n"+indent+"\t<"+XML_REF_HISTORY+">");
		if(this.history != null){
			for(NeighboringCellHistory ref : this.history){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_HISTORY+">");		
		sb.append("\n"+indent+"\t<"+XML_REF_CDMAPOSITION+">");
		if(this.cdmaposition != null){
			for(CdmaCellData ref : this.cdmaposition){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_CDMAPOSITION+">");		
		sb.append("\n"+indent+"\t<"+XML_REF_OTHERPOSITION+">");
		if(this.otherPosition != null){
			for(OtherCellData ref : this.otherPosition){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_OTHERPOSITION+">");		
		// TODO deal with other case

		sb.append("</"+XML_CELL+">");
		return sb.toString();
	}
}
