package fr.inria.diverse.mobileprivacyprofilerserver.database.user;

import com.j256.ormlite.field.DataType;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import fr.inria.diverse.mobileprivacyprofilerserver.utils.GmailUtil;
import fr.inria.diverse.mobileprivacyprofilerserver.utils.AuthenticationUtil;

import javax.mail.MessagingException;
import java.io.IOException;
import java.security.GeneralSecurityException;

import static fr.inria.diverse.mobileprivacyprofilerserver.database.user.UserDBHelper.PROFILE_EMAIL;

@DatabaseTable(tableName = "user")
public class User {

    public static final String USER_USERNAME_PREFIX = "profile_user_";

    public static final String USER_ID_XML = "id";
    public static final String USER_USERNAME_XML = "username";
    public static final String USER_SALT_XML = "salt";
    public static final String USER_PASSWORD_XML = "password";
    public static final String USER_EMAIL_XML = "email";
    public static final String USER_DEVICE_XML = "device";
    public static final String USER_TOKEN_XML = "token";
    public static final String USER_TOKEN_LAST_UPDATE_XML = "tokenLastUpdate";



    // id is generated by the database and set on the object automagically
    @DatabaseField(generatedId = true)
    private int _id;

    @DatabaseField
    private String username;

    @DatabaseField(dataType=DataType.BYTE_ARRAY)
    private byte[] salt;

    @DatabaseField(dataType=DataType.BYTE_ARRAY)
    private byte[] password;

    @DatabaseField
    private String email;

    @DatabaseField
    private String device;

    @DatabaseField
    private String token;

    @DatabaseField
    private String tokenLastUpdate;

    public User() {} // needed by ormlite

    public User(String username, String email) throws GeneralSecurityException, IOException, MessagingException {
        this.username = username;
        this.email = email;
        this.salt = AuthenticationUtil.INSTANCE.generateSalt();
        final String clearPassword = AuthenticationUtil.INSTANCE.generateRandomPassword(AuthenticationUtil.Length);
        sendPasswordToEmail(clearPassword);
        this.password = AuthenticationUtil.INSTANCE.hash(clearPassword.toCharArray(),this.salt);
        this.device = "";
    }

    public User(String email, int id) throws GeneralSecurityException, IOException, MessagingException {
        this.username = USER_USERNAME_PREFIX + id;
        this.email = email;
        this.salt = AuthenticationUtil.INSTANCE.generateSalt();
        final String clearPassword = AuthenticationUtil.INSTANCE.generateRandomPassword(AuthenticationUtil.Length);
        sendPasswordToEmail(clearPassword);
        this.password = AuthenticationUtil.INSTANCE.hash(clearPassword.toCharArray(),this.salt);
        this.device = "";
    }

    public int get_id() {
        return _id;
    }
    public void set_id(int _id) {
        this._id = _id;
    }

    public String getUsername() {
        return username;
    }
    public void setUsername(String id) {
        this.username = id;
    }

    public byte[] getSalt() {
        return salt;
    }
    public void setSalt(byte[] salt) {
        this.salt = salt;
    }

    public byte[] getPassword() {
        return password;
    }
    public void setPassword(byte[] password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }

    public String getDevice() {
        return device;
    }

    public void setDevice(String device) {
        this.device = device;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public String getTokenLastUpdate() {
        return tokenLastUpdate;
    }

    public void setTokenLastUpdate(String tokenLastUpdate) {
        this.tokenLastUpdate = tokenLastUpdate;
    }

    public void sendPasswordToEmail(String password) throws GeneralSecurityException, MessagingException, IOException {
        //https://stackoverflow.com/questions/26135310/gmail-api-returns-403-error-code-and-delegation-denied-for-user-email
        GmailUtil.INSTANCE.sendMessage(this.email,PROFILE_EMAIL,"Profile : nom d'utilisateur et mot de passe","Bonjour,\n\nVous trouverez ci-dessous votre nom d'utilisateur ainsi que votre mot passe nécessaires lors de votre connection à l'application.\nNom d'utilisateur : "+ getUsername()+"\nMot de passe : "+password+"\n\nL'équipe Profile.");
    }

    @Override
    public boolean equals(Object obj) {
        return this.username.equals(((User)obj).username) && this.device.equals(((User)obj).device);
    }
}
