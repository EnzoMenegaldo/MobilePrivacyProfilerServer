/*  */
package fr.inria.diverse.mobileprivacyprofilerserver.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import fr.inria.diverse.mobileprivacyprofilerserver.datamodel.associations.DetectedWifi_AccessPoint;
// Start of user code additional import for Contact
// End of user code

/** 
  * Contact in the device 
  */ 
@DatabaseTable(tableName = "contact")
public class Contact {

	public static Log log = LogFactory.getLog(Contact.class);

	public static final String XML_CONTACT = "CONTACT";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_SURNAME = "surname";
	public static final String XML_ATT_FIRSTNAME = "firstName";
	public static final String XML_ATT_MIDDLENAME = "middleName";
	public static final String XML_ATT_LASTNAME = "lastName";
	public static final String XML_ATT_NAMEPREFIX = "namePrefix";
	public static final String XML_REF_PHONENUMBERS = "phoneNumbers";
	public static final String XML_REF_PHYSICALADDRESSES = "physicalAddresses";
	public static final String XML_REF_EMAILS = "emails";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected MobilePrivacyProfilerDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	

	@DatabaseField
	protected String surname;

	@DatabaseField
	protected String firstName;

	@DatabaseField
	protected String middleName;

	@DatabaseField
	protected String lastName;

	/** Title or
 Mr, M */ 
	@DatabaseField
	protected String namePrefix;
	

	@ForeignCollectionField(eager = false, foreignFieldName = "contact")
	protected ForeignCollection<ContactPhoneNumber> phoneNumbers;

	@ForeignCollectionField(eager = false, foreignFieldName = "contact")
	protected ForeignCollection<ContactPhysicalAddress> physicalAddresses;

	@ForeignCollectionField(eager = false, foreignFieldName = "contact")
	protected ForeignCollection<ContactEmail> emails;

	// Start of user code Contact additional user properties
	// End of user code
	
	public Contact() {} // needed by ormlite
	public Contact(String surname, String firstName, String middleName, String lastName, String namePrefix) {
		super();
		this.surname = surname;
		this.firstName = firstName;
		this.middleName = middleName;
		this.lastName = lastName;
		this.namePrefix = namePrefix;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public MobilePrivacyProfilerDBHelper getContextDB(){
		return _contextDB;
	}
	public void setContextDB(MobilePrivacyProfilerDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public String getSurname() {
		return this.surname;
	}
	public void setSurname(String surname) {
		this.surname = surname;
	}
	public String getFirstName() {
		return this.firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getMiddleName() {
		return this.middleName;
	}
	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}
	public String getLastName() {
		return this.lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getNamePrefix() {
		return this.namePrefix;
	}
	public void setNamePrefix(String namePrefix) {
		this.namePrefix = namePrefix;
	}

	public Collection<ContactPhoneNumber> getPhoneNumbers() {
		return this.phoneNumbers;
	}					
	public Collection<ContactPhysicalAddress> getPhysicalAddresses() {
		return this.physicalAddresses;
	}					
	public Collection<ContactEmail> getEmails() {
		return this.emails;
	}					



	public String toXML(String indent, MobilePrivacyProfilerDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_CONTACT);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_SURNAME);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.surname));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_FIRSTNAME);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.firstName));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_MIDDLENAME);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.middleName));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_LASTNAME);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.lastName));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NAMEPREFIX);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.namePrefix));
    	sb.append("\" ");
    	sb.append(">");


		sb.append("\n"+indent+"\t<"+XML_REF_PHONENUMBERS+">");
		if(this.phoneNumbers != null){
			for(ContactPhoneNumber ref : this.phoneNumbers){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_PHONENUMBERS+">");		
		sb.append("\n"+indent+"\t<"+XML_REF_PHYSICALADDRESSES+">");
		if(this.physicalAddresses != null){
			for(ContactPhysicalAddress ref : this.physicalAddresses){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_PHYSICALADDRESSES+">");		
		sb.append("\n"+indent+"\t<"+XML_REF_EMAILS+">");
		if(this.emails != null){
			for(ContactEmail ref : this.emails){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_EMAILS+">");		
		// TODO deal with other case

		sb.append("</"+XML_CONTACT+">");
		return sb.toString();
	}
}
