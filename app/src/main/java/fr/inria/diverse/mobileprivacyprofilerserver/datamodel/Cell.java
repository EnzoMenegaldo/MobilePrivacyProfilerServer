/*  */
package fr.inria.diverse.mobileprivacyprofilerserver.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import fr.inria.diverse.mobileprivacyprofilerserver.datamodel.associations.DetectedWifi_AccessPoint;
// Start of user code additional import for Cell
// End of user code

/** 
  *  
  */ 
@DatabaseTable(tableName = "cell")
public class Cell {

	public static Log log = LogFactory.getLog(Cell.class);

	public static final String XML_CELL = "CELL";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_CELLID = "cellId";
	public static final String XML_REF_HISTORY = "history";
	public static final String XML_REF_CDMAPOSITION = "cdmaposition";
	public static final String XML_REF_OTHERPOSITION = "otherPosition";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected MobilePrivacyProfilerDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	public boolean cdmaposition_mayNeedDBRefresh = true;
	public boolean otherPosition_mayNeedDBRefresh = true;
	

	@DatabaseField
	protected int cellId;
	

	@ForeignCollectionField(eager = false, foreignFieldName = "cells")
	protected ForeignCollection<NeighboringCellHistory> history;

	@DatabaseField(foreign = true)
	protected CdmaCellData cdmaposition;

	@DatabaseField(foreign = true) //, columnName = USER_ID_FIELD_NAME)
	protected OtherCellData otherPosition;

	// Start of user code Cell additional user properties
	// End of user code
	
	public Cell() {} // needed by ormlite
	public Cell(int cellId) {
		super();
		this.cellId = cellId;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public MobilePrivacyProfilerDBHelper getContextDB(){
		return _contextDB;
	}
	public void setContextDB(MobilePrivacyProfilerDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public int getCellId() {
		return this.cellId;
	}
	public void setCellId(int cellId) {
		this.cellId = cellId;
	}

	public Collection<NeighboringCellHistory> getHistory() {
		return this.history;
	}					
	public CdmaCellData getCdmaposition() {
		try {
			if(cdmaposition_mayNeedDBRefresh && _contextDB != null){
				_contextDB.cdmaCellDataDao.refresh(this.cdmaposition);
				cdmaposition_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.cdmaposition == null){
			log.warn("Cell may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.cdmaposition;
	}
	public void setCdmaposition(CdmaCellData cdmaposition) {
		this.cdmaposition = cdmaposition;
	}			
	public OtherCellData getOtherPosition() {
		try {
			if(otherPosition_mayNeedDBRefresh && _contextDB != null){
				_contextDB.otherCellDataDao.refresh(this.otherPosition);
				otherPosition_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.otherPosition == null){
			log.warn("Cell may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.otherPosition;
	}
	public void setOtherPosition(OtherCellData otherPosition) {
		this.otherPosition = otherPosition;
	}			



	public String toXML(String indent, MobilePrivacyProfilerDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_CELL);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_CELLID);
    	sb.append("=\"");
		sb.append(this.cellId);
    	sb.append("\" ");
    	sb.append(">");


		if(this.history != null){
			for(NeighboringCellHistory ref : this.history){
					
	    		sb.append("\n"+indent+"\t<"+XML_REF_HISTORY+" id=\"");
	    		sb.append(ref._id);
	        	sb.append("\"/>");
	    	}		
		}
		if(this.cdmaposition!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_CDMAPOSITION+">");
			sb.append(this.cdmaposition.getId());
	    	sb.append("</"+XML_REF_CDMAPOSITION+">");
		}
		if(this.otherPosition!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_OTHERPOSITION+">");
			sb.append(this.otherPosition.getId());
	    	sb.append("</"+XML_REF_OTHERPOSITION+">");
		}
		// TODO deal with other case

		sb.append("</"+XML_CELL+">");
		return sb.toString();
	}
}
