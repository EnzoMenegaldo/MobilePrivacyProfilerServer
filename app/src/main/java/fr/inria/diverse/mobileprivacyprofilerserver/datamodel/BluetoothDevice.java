/*  */
package fr.inria.diverse.mobileprivacyprofilerserver.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

// Start of user code additional import for BluetoothDevice
// End of user code

/** 
  *  
  */ 
@DatabaseTable(tableName = "bluetoothDevice")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, 
                  property  = "_id",
				  scope = BluetoothDevice.class)
public class BluetoothDevice implements DbClass{

	public static Log log = LogFactory.getLog(BluetoothDevice.class);

	public static final String XML_BLUETOOTHDEVICE = "BLUETOOTHDEVICE";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_CLIENT_ID = "client_id";
	public static final String XML_ATT_MAC = "mac";
	public static final String XML_ATT_NAME = "name";
	public static final String XML_ATT_TYPE = "type";
	public static final String XML_ATT_USERID = "userId";
	public static final String XML_REF_BLUETOOTHLOG = "bluetoothLog";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	@JsonIgnore
	protected MobilePrivacyProfilerDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	

	@DatabaseField
	protected java.lang.String mac;

	@DatabaseField
	protected java.lang.String name;

	/** https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html */ 
	@DatabaseField
	protected int type;

	@DatabaseField
	protected java.lang.String userId;


	@ForeignCollectionField(eager = false, foreignFieldName = "device")
	@JsonIgnore
	protected ForeignCollection<BluetoothLog> bluetoothLog;

	// Start of user code BluetoothDevice additional user properties
	// End of user code
	
	public BluetoothDevice() {} // needed by ormlite
	public BluetoothDevice(java.lang.String mac, java.lang.String name, int type, java.lang.String userId) {
		super();
		this.mac = mac;
		this.name = name;
		this.type = type;
		this.userId = userId;
	}

	/**
	 * raw_id from client converted as part of a primary key in combination of user UUID
	 */
	@DatabaseField
	protected int client_id;

	public int get_id() {
		return client_id;
	}
	@JsonProperty
	public void set_id(int id) {
		this.client_id = id;
	}

	public int getId() {
		return _id;
	}
	@JsonProperty
	public void setId(int id) {
		this._id = id;
	}

	public MobilePrivacyProfilerDBHelper getContextDB(){
		return _contextDB;
	}
	@JsonIgnore
	public void setContextDB(MobilePrivacyProfilerDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public java.lang.String getMac() {
		return this.mac;
	}
	@JsonProperty
	public void setMac(java.lang.String mac) {
		this.mac = mac;
	}
	public java.lang.String getName() {
		return this.name;
	}
	@JsonProperty
	public void setName(java.lang.String name) {
		this.name = name;
	}
	public int getType() {
		return this.type;
	}
	@JsonProperty
	public void setType(int type) {
		this.type = type;
	}
	public java.lang.String getUserId() {
		return this.userId;
	}
	@JsonProperty
	public void setUserId(java.lang.String userId) {
		this.userId = userId;
	}

	public List	<BluetoothLog> getBluetoothLog() {
		if(null==this.bluetoothLog){return null;}
		return new ArrayList<BluetoothLog>(bluetoothLog);
	}
	

			



	public String toXML(String indent, MobilePrivacyProfilerDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_BLUETOOTHDEVICE);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
		sb.append(XML_ATT_CLIENT_ID);
		sb.append("=\"");
		sb.append(this.client_id);
		sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_MAC);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.mac));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NAME);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.name));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_TYPE);
    	sb.append("=\"");
		sb.append(this.type);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_USERID);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.userId));
    	sb.append("\" ");
    	sb.append(">");


		sb.append("\n"+indent+"\t<"+XML_REF_BLUETOOTHLOG+">");
		if(this.bluetoothLog != null){
			for(BluetoothLog ref : this.bluetoothLog){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_BLUETOOTHLOG+">");		
		// TODO deal with other case

		sb.append("</"+XML_BLUETOOTHDEVICE+">");
		return sb.toString();
	}
}
